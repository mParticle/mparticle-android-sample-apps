name: "Release Sample Apps"

on:
  workflow_dispatch:
    inputs:
      dryRun:
        description: "Do a dry run to preview instead of a real release [true/false]"
        required: true
        default: "true"

jobs:

#   SDK release is done from public main branch.
  confirm-public-repo-main-branch:
    name: "Confirm release is run from public/main branch"
    uses: mParticle/mparticle-workflows/.github/workflows/sdk-release-repo-branch-check.yml@main

  create-release-branch:
    name: "Create Release Branch"
    runs-on: ubuntu-latest
    needs: confirm-public-repo-main-branch
    env:
      GITHUB_TOKEN: ${{ secrets.MP_SEMANTIC_RELEASE_BOT }}
      GIT_AUTHOR_NAME: mparticle-automation
      GIT_AUTHOR_EMAIL: developers@mparticle.com
      GIT_COMMITTER_NAME: mparticle-automation
      GIT_COMMITTER_EMAIL: developers@mparticle.com
    steps:
      - name: "Checkout next release branch"
        uses: actions/checkout@v2
        with:
          ref: development
      - name: "Import GPG Key"
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: "Create and push release branch"
        run: |
          git checkout -b release/${{ github.run_number }}
          git push origin release/${{ github.run_number }}

  # Bump up version for each sample app in repo
  # make sure to add build.gradle in release.sh
  semantic-release:
    name: "Semantic Release"
    needs: create-release-branch
    runs-on: macos-latest
    env:
      GITHUB_TOKEN: ${{ secrets.MP_SEMANTIC_RELEASE_BOT }}
      GIT_AUTHOR_NAME: mparticle-automation
      GIT_AUTHOR_EMAIL: developers@mparticle.com
      GIT_COMMITTER_NAME: mparticle-automation
      GIT_COMMITTER_EMAIL: developers@mparticle.com
    steps:
      - name: "Checkout public main branch"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: main
      - name: "Import GPG Key"
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: "Install JDK 11"
        uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "11"
      - name: "Merge release branch into main branch"
        run: |
          git pull origin release/${{ github.run_number }}
      - name: "Semantic Release --dry-run"
        if: ${{ github.event.inputs.dryRun == 'true' }}
        run: |
          npx \
          -p lodash \
          -p semantic-release@17 \
          -p @semantic-release/changelog@5 \
          -p @semantic-release/git@9 \
          -p @semantic-release/exec@5 \
          semantic-release --dry-run
      - name: "Semantic Release"
        if: ${{ github.event.inputs.dryRun == 'false' }}
        run: |
          npx \
          -p lodash \
          -p semantic-release@17 \
          -p @semantic-release/changelog@5 \
          -p @semantic-release/git@9 \
          -p @semantic-release/exec@5 \
          semantic-release
      - name: "Push automated release commits to release branch"
        if: ${{ github.event.inputs.dryRun == 'false' }}
        run: |
          git push origin HEAD:release/${{ github.run_number }}
  sync-repository:
    name: "Sync Repository"
    needs: semantic-release
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout main branch"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: ${{ github.repository }}
          token: ${{ secrets.MP_SEMANTIC_RELEASE_BOT }}
          ref: main
      - name: "Merge release branch into main branch"
        if: ${{ github.event.inputs.dryRun == 'false' }}
        run: |
          git pull origin release/${{ github.run_number }}
      - name: "Push release commits to main branch"
        if: ${{ github.event.inputs.dryRun == 'false'}}
        run: |
          git push origin HEAD:main
          git push -f origin HEAD:chore/dependabot
          git push origin HEAD:development
      - name: "Delete release branch"
        if: ${{ github.event.inputs.dryRun == 'false' }}
        run: |
          git push --delete origin release/${{ github.run_number }}


